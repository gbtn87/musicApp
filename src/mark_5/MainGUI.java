/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mark_5;

import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Gustavo
 */
public class MainGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainGUI
     */
    Session currentSession;
    ListSelectionModel notesListSelModel;
    HintDialog hintDialog;
    
    public MainGUI() {
        initComponents();
        hintDialog = new HintDialog(this,true);
        notesListSelModel = notesList.getSelectionModel();
        
        notesPanel.setLayout(null);
        infoTextArea.append(currentSession.Welcome());
        submitButton.setEnabled(false);
        
        ImageIcon wholeNoteIcon = new ImageIcon(
                new ImageIcon(getClass().getResource("/mark_5/whole-note.png"))
                        .getImage()
                        .getScaledInstance(40, 40, Image.SCALE_DEFAULT));
        
        wholeNoteLabel.setIcon(wholeNoteIcon);        
        wholeNoteLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabbedPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        hintButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        sessionProgress = new javax.swing.JProgressBar();
        roundLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesList = new javax.swing.JList();
        startButton = new javax.swing.JButton();
        notesPanel = new javax.swing.JPanel();
        staffLabel = new javax.swing.JLabel();
        wholeNoteLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(720, 480));

        mainTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        hintButton.setText("Hint");
        hintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        infoTextArea.setEditable(false);
        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        jScrollPane1.setViewportView(infoTextArea);

        sessionProgress.setBackground(new java.awt.Color(0, 204, 255));
        sessionProgress.setForeground(new java.awt.Color(255, 0, 0));
        sessionProgress.setMaximum(10);

        roundLabel.setText("0/10");

        notesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "C (dó)", "D (ré)", "E (mi)", "F (fa)", "G (sol)", "A (lá)", "B (sí)" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        notesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        notesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                notesListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(notesList);

        startButton.setText("New Session");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        notesPanel.setBackground(new java.awt.Color(255, 255, 255));
        notesPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, javax.swing.UIManager.getDefaults().getColor("TextField.shadow")));

        staffLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mark_5/music-staff-hi.png"))); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(wholeNoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(355, 355, 355))
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wholeNoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sessionProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(notesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(roundLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 100, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(notesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sessionProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roundLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Which Note is on the Staff?", jPanel2);

        jMenu1.setText("Options");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Shows the window with the Hint, in case the user needs some help
     * Updates the number of times the user has used the hint
     * @param evt 
     */
    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintButtonActionPerformed
        // TODO add your handling code here:
        hintDialog.setLocationRelativeTo(null);
        hintDialog.setVisible(true);
        currentSession.hints++;
    }//GEN-LAST:event_hintButtonActionPerformed

    /**
     * This method plays the round, shows the result and calls the next round
     * If it's the last round in the session, it plays it
     * and call the results of the current session
     * @param evt 
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        if (currentSession.currentRound.roundNum < 10)
        {
            showRoundResult();
            nextRound();
            showNoteOnStaff();            
        }
        else
        {
            showRoundResult();
            showSessionResults();
            notesListSelModel.clearSelection();
            submitButton.setEnabled(false);
            currentSession.gamePhase = phases.wait;
        }

    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Every time the user selects an item on the list, this method is run
     * Enables the submit button (to avoid submitting null guesses)
     * Gets the String of the selected item in the list and substrings it
     * Finally, it sets the userGuess for this round
     * (?) Should it be inside Round instead of Session ?
     * @param evt 
     */
    private void notesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_notesListValueChanged
        
        if (!notesListSelModel.getValueIsAdjusting())
        {
            if (currentSession.gamePhase == phases.inSession) {
                submitButton.setEnabled(true);
            }
            try
            {               
                String userGuessNote = (String)notesList.getSelectedValue();
                userGuessNote = userGuessNote.substring(0, 1);
                currentSession.setUserGuess(userGuessNote); 
            } catch (Exception e)
            {
            }
        }
    }//GEN-LAST:event_notesListValueChanged

    /**
     * Starts a new session
     * Creates a new session Object
     * Puts the game into "inSession" mode
     * Calls a new round (that happens inside the Session Constructor)
     * and shows a note on the staff
     * Updates the label and the progress bar 
     * Clears any selection and disables the "Submit" button
     * @param evt 
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        currentSession = new Session();      
        infoTextArea.append("\nNew Session Started!\n");
        currentSession.gamePhase = phases.inSession;
        updateRoundLabels();
        showNoteOnStaff();
        notesListSelModel.clearSelection();
        submitButton.setEnabled(false);
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton hintButton;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JList notesList;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JLabel roundLabel;
    private javax.swing.JProgressBar sessionProgress;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel wholeNoteLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Updates the Label and the progress bar according to the round number
     */
    private void updateRoundLabels()
    {
        roundLabel.setText(currentSession.currentRound.roundNum + "/10");
        sessionProgress.setValue(currentSession.currentRound.roundNum);
    }
    

    /**
     * Gets a Random note
     * Makes the whole-note image visible
     * Positions the whole-note image correctly
     */
    public void showNoteOnStaff()
    { 
        currentSession.currentRound.note = Round.getRandomNote();
        if (wholeNoteLabel.isVisible()== false)
        {
            wholeNoteLabel.setVisible(true);
        }
        wholeNoteLabel.setLocation(currentSession.currentRound.note.getNoteLoc());
    }
    
    /**
     * Appends the text with the results of the session to the Text Area
     */
    public void showSessionResults()
    {
        infoTextArea.append(currentSession.showSessionResults());
    }    

    /**
     * Appends the text with the results of the round to the Text Area
     */
    private void showRoundResult()
    {
        infoTextArea.append(currentSession.roundResult());
    }

    /**
     * Calls a new round with the last user guess
     * in case the new round shows the exact same note, so that the user can
     * just hit submit again without having to click the list one more time
     * updates the labels
     */
    private void nextRound() {
        currentSession.currentRound = new Round(currentSession.currentRound.roundNum+1, 
        currentSession.currentRound.userGuess);
        updateRoundLabels();
    }
}
