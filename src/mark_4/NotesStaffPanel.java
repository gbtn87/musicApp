/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mark_4;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.OverlayLayout;

/**
 *
 * @author Gustavo
 */
public class NotesStaffPanel extends javax.swing.JFrame {
    Model gameModel;
    ListSelectionModel notesListSelModel;
    HintDialog hintDialog;
    
    public NotesStaffPanel() {
        //Métodos de preparação dos componentes e das variáveis dos mesmos
        //vão aqui.
        initComponents();
        hintDialog = new HintDialog(this,true);
        notesPanel.setLayout(null);
        //notesPanel.setLayout(new OverlayLayout(notesPanel));
        gameModel = new Model();
        notesListSelModel = notesList.getSelectionModel();
        infoTextArea.append(gameModel.Welcome());
        submitButton.setEnabled(false);
        ImageIcon wholeNoteIcon = new ImageIcon(new ImageIcon("C:\\Users\\Gustavo\\Desktop\\whole-note.png").getImage().getScaledInstance(40, 40, Image.SCALE_DEFAULT));
        wholeNoteLabel.setIcon(wholeNoteIcon);        
        wholeNoteLabel.setVisible(false);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        hintButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        sessionProgress = new javax.swing.JProgressBar();
        roundLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesList = new javax.swing.JList();
        startButton = new javax.swing.JButton();
        notesPanel = new javax.swing.JPanel();
        staffLabel = new javax.swing.JLabel();
        wholeNoteLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(400, 480));

        hintButton.setText("Hint");
        hintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        infoTextArea.setEditable(false);
        infoTextArea.setColumns(20);
        infoTextArea.setRows(5);
        jScrollPane1.setViewportView(infoTextArea);

        sessionProgress.setBackground(new java.awt.Color(0, 204, 255));
        sessionProgress.setForeground(new java.awt.Color(255, 0, 0));
        sessionProgress.setMaximum(10);

        roundLabel.setText("1/10");

        notesList.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        notesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "C (dó)", "D (ré)", "E (mi)", "F (fa)", "G (sol)", "A (lá)", "B (sí)" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        notesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        notesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                notesListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(notesList);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        notesPanel.setBackground(new java.awt.Color(255, 255, 255));

        staffLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mark_3/music-staff-hi.png"))); // NOI18N

        javax.swing.GroupLayout notesPanelLayout = new javax.swing.GroupLayout(notesPanel);
        notesPanel.setLayout(notesPanelLayout);
        notesPanelLayout.setHorizontalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, notesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(wholeNoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(355, 355, 355))
        );
        notesPanelLayout.setVerticalGroup(
            notesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(staffLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wholeNoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sessionProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(notesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(roundLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 59, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(hintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(notesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hintButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sessionProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roundLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {hintButton, startButton, submitButton});

        jMenu1.setText("Opções");

        jMenu3.setText("jMenu3");

        jMenuItem1.setText("jMenuItem1");
        jMenu3.add(jMenuItem1);

        jMenu1.add(jMenu3);

        jMenu4.setText("jMenu4");
        jMenu1.add(jMenu4);

        jMenu5.setText("jMenu5");
        jMenu1.add(jMenu5);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        
        switch(gameModel.gamePhase)
        {
            case open:
            {                
                startButton.setText("Restart");
                gameModel.setGamePhase(phases.sessionStarted);
                //Mostra a nota
                //Esse "append" será substituido pela geração de uma figura
                //com a nota correta 
                showNote();
                updateRound();
                break;
            }
            case sessionStarted:
            {
                /*
                Recomeçar a session
                */
                restart();
                showNote();
                updateRound();
                break;
            }
            case sessionFinished:
            {
                /*
                Vai alguma coisa aqui?
                */
                break;
            }
        }
                
        
        
    }//GEN-LAST:event_startButtonActionPerformed

    private void notesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_notesListValueChanged
        // TODO add your handling code here:
        if (!notesListSelModel.getValueIsAdjusting())
        {
            if (gameModel.gamePhase == phases.sessionStarted) {
                submitButton.setEnabled(true);                
            }
            String userGuessNote = (String)notesList.getSelectedValue();
            userGuessNote = userGuessNote.substring(0, 1);
            gameModel.setUserGuess(userGuessNote);
        }
    }//GEN-LAST:event_notesListValueChanged

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:
        switch(gameModel.gamePhase)
        {
            case sessionStarted:
            {   
                ShowResult();
                showNote();
                updateRound();
                break;
            }
            
            //Só chega aqui se round == 10
            //Escrevo "Game finished" aqui ou no update round?
            case sessionFinished:
            {
                ShowResult();
                showSessionResults();
                gameModel.gamePhase = phases.open;
            }
        }
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintButtonActionPerformed
        // TODO add your handling code here:
        hintDialog.setLocationRelativeTo(null);
        hintDialog.setVisible(true);
        gameModel.hints++;
    }//GEN-LAST:event_hintButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotesStaffPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotesStaffPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotesStaffPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotesStaffPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NotesStaffPanel mainGui = new NotesStaffPanel();
                mainGui.setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton hintButton;
    private javax.swing.JTextArea infoTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList notesList;
    private javax.swing.JPanel notesPanel;
    private javax.swing.JLabel roundLabel;
    private javax.swing.JProgressBar sessionProgress;
    private javax.swing.JLabel staffLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel wholeNoteLabel;
    // End of variables declaration//GEN-END:variables

    private void updateRound()
    {
        gameModel.setRoundNum(gameModel.getRoundNum() + 1);
        roundLabel.setText(gameModel.getRoundNum() + "/10");
        sessionProgress.setValue(gameModel.getRoundNum());
        if (gameModel.getRoundNum() >= 10)
        {
            gameModel.gamePhase = phases.sessionFinished;
        }
    }
    
    public void restart()
    {
        infoTextArea.append("\nGame Restarted\n");
        gameModel.setRoundNum(0);
        //zerar num de rounds
        //checkstate
    }
    
    public void showNote()
    { 
        gameModel.currentNote = Note.getRandomNote();
        if (wholeNoteLabel.isVisible()== false)
        {
            wholeNoteLabel.setVisible(true);
        }
        wholeNoteLabel.setLocation(gameModel.currentNote.getNoteLoc());
        //notesTextArea.setText(gameModel.printNoteOnStaff());
    }
    
   public void ShowResult()
    {
        boolean answer = Note.checkNotes(gameModel.currentNote,
                gameModel.getUserGuess());
        if (answer)
        {
            infoTextArea.append("\nThat is correct\n");
            gameModel.rightAnswers++;
        }
        else
            infoTextArea.append("\nThat is incorrect\n");
    }
    
    public void showSessionResults()
    {
        infoTextArea.append("\nSession finished!\n");
        infoTextArea.append("You answered " + gameModel.rightAnswers + "/10 correctly!\n");
        if (gameModel.rightAnswers < 9)
            infoTextArea.append("Keep Practicing!\n");
        else if(gameModel.rightAnswers < 10)
        {
            infoTextArea.append("Almost Perfect!\n");        
            infoTextArea.append("Keep Practicing!\n");
        }
        else
            infoTextArea.append("Perfect!\nCongratulations!\n");
        infoTextArea.append("You've used Hint " + gameModel.hints + " times.\n");
    }    
}

